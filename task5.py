# -*- coding: utf-8 -*-
"""Task5.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1BNPeapKIItcOjYjn0VD9cmlPFYd4OkrH

**Installing libraries**
"""

# Colab cell 1
!pip install -q tensorflow tensorflow_datasets matplotlib pandas opencv-python

import os, sys, json, math, glob, random
from pathlib import Path
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import tensorflow as tf
print("TF", tf.__version__)
AUTOTUNE = tf.data.AUTOTUNE

"""**Downloading Food-101**"""

# Colab cell 2
# 1) In Colab upload your kaggle.json (from your Kaggle account -> API)
from google.colab import files
print("Upload kaggle.json (from Kaggle account -> API -> Create New Token)")
files.upload()  # choose kaggle.json file

# 2) move it into place and download dataset
!mkdir -p ~/.kaggle
!cp kaggle.json ~/.kaggle/
!chmod 600 ~/.kaggle/kaggle.json

# 3) download and unzip
!kaggle datasets download -d dansbecker/food-101 -p /content --unzip

"""**Fixing errors and downloading DataSet**"""

import tensorflow_datasets as tfds

# Load Food101 dataset
(ds_train, ds_val), ds_info = tfds.load(
    "food101",
    split=["train", "validation"],
    shuffle_files=True,
    as_supervised=True,  # returns (image, label)
    with_info=True,
)

print(ds_info)
num_classes = ds_info.features["label"].num_classes
class_names = ds_info.features["label"].names

"""**Loading Dataset with TFDS**"""

(ds_train, ds_val), ds_info = tfds.load(
    "food101",
    split=["train", "validation"],
    as_supervised=True,  # (image, label)
    with_info=True,
)
class_names = ds_info.features["label"].names
num_classes = ds_info.features["label"].num_classes
print("Total classes:", num_classes)
subset_classes = class_names[:10]   # اختر أول 10 classes
subset_indices = [class_names.index(c) for c in subset_classes]

def filter_subset(image, label):
    return tf.reduce_any([tf.equal(label, i) for i in subset_indices])

ds_train = ds_train.filter(filter_subset)
ds_val   = ds_val.filter(filter_subset)

print("Subset classes:", subset_classes)

"""**Preprocessing images**"""

IMG_SIZE = 128
BATCH_SIZE = 32
AUTOTUNE = tf.data.AUTOTUNE

def preprocess(image, label):
    image = tf.image.resize(image, (IMG_SIZE, IMG_SIZE))
    image = tf.cast(image, tf.float32) / 255.0
    return image, label

train_ds = ds_train.map(preprocess, num_parallel_calls=AUTOTUNE)
val_ds   = ds_val.map(preprocess, num_parallel_calls=AUTOTUNE)

train_ds = train_ds.shuffle(1000).batch(BATCH_SIZE).cache().prefetch(AUTOTUNE)
val_ds   = val_ds.batch(BATCH_SIZE).cache().prefetch(AUTOTUNE)

default_cal = 250
cal_dict = {c: default_cal for c in subset_classes}
cal_dict.update({
    "pizza": 285,
    "hamburger": 295,
    "french_fries": 312,
    "ice_cream": 207,
    "sushi": 200,
    "spaghetti_bolognese": 350,
    "caesar_salad": 180,
})
calories_ordered = np.array([cal_dict.get(c, default_cal) for c in subset_classes], dtype=np.float32)

"""**Build Model (MobileNetV2)**"""

def add_calories(image, label):
    calories = tf.gather(calories_ordered, label)
    return image, (label, calories)

train_ds = train_ds.map(add_calories)
val_ds   = val_ds.map(add_calories)

"""****"""

from tensorflow.keras import layers, models, optimizers

base = tf.keras.applications.MobileNetV2(
    include_top=False, input_shape=(IMG_SIZE, IMG_SIZE, 3), pooling="avg", weights="imagenet"
)
base.trainable = False  # freeze backbone

inp = layers.Input(shape=(IMG_SIZE, IMG_SIZE, 3))
x = base(inp, training=False)
x = layers.Dropout(0.3)(x)

class_out = layers.Dense(len(subset_classes), activation="softmax", name="class_output")(x)
calorie_out = layers.Dense(1, activation="linear", name="calorie_output")(x)

model = models.Model(inputs=inp, outputs=[class_out, calorie_out])

model.compile(
    optimizer=optimizers.Adam(1e-3),
    loss={"class_output": "sparse_categorical_crossentropy", "calorie_output": "mse"},
    metrics={"class_output": "accuracy", "calorie_output": "mae"},
    loss_weights={"class_output": 1.0, "calorie_output": 0.5},
)

model.summary()

"""**Train (Fast Demo: 3 epochs)**"""

history = model.fit(train_ds, validation_data=val_ds, epochs=3)

"""**Inference Function**"""

def predict_image(img):
    img = tf.image.resize(img, (IMG_SIZE, IMG_SIZE))
    img = tf.cast(img, tf.float32) / 255.0
    img = img[tf.newaxis, ...]

    probs, cal_pred = model.predict(img)
    probs = probs[0]

    pred_idx = np.argmax(probs)
    pred_class = subset_classes[pred_idx]

    argmax_cal = calories_ordered[pred_idx]
    expected_cal = float(np.dot(probs, calories_ordered))

    return {
        "predicted_class": pred_class,
        "confidence": float(probs[pred_idx]),
        "argmax_calories": float(argmax_cal),
        "expected_calories": expected_cal,
    }

"""**Test on a sample**"""

for img, label in ds_val.take(1):
    result = predict_image(img.numpy())
    plt.imshow(img.numpy().astype("uint8"))
    plt.axis("off")
    plt.title(f"{result['predicted_class']} ({result['expected_calories']:.0f} kcal)")
    plt.show()
    print(result)